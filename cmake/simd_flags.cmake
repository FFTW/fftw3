macro(fftw_check_flag _purpose _flag _var)
  unset(FFTW_CC_HAS_${_var})
  CHECK_C_COMPILER_FLAG(${_flag} FFTW_CC_HAS_${_var})
  if(FFTW_CC_HAS_${_var})
    set(${_var} ${_flag})
    message(STATUS "Flags for ${_purpose} : ${_flag}" )
  else()
    message(FATAL_ERROR "Can not determine how to set compiler flag for ${_purpose}")
  endif()
endmacro()

if(HAVE_SSE)
  if(MSVC AND NOT CMAKE_CL_64)
    fftw_check_flag("SSE extension" "/arch:SSE" FFTW_SSE_FLAGS)
  elseif(NOT MSVC)
    fftw_check_flag("SSE extension" "-msse" FFTW_SSE_FLAGS)
  endif()

  if(FFTW_USE_FMA)
    set(FFTW_SSE_DEFINE "HAVE_FMA")
  endif()
endif()

if(HAVE_SSE2)
  if(MSVC AND NOT CMAKE_CL_64)
    fftw_check_flag("SSE2 extension" "/arch:SSE2" FFTW_SSE2_FLAGS)
  elseif(NOT MSVC)
    fftw_check_flag("SSE2 extension" "-msse2" FFTW_SSE2_FLAGS)
  endif()
  if(FFTW_USE_FMA)
    set(FFTW_SSE2_DEFINE "HAVE_FMA")
  endif()
endif()

if(HAVE_AVX)
  if(MSVC)
    fftw_check_flag("AVX extension" "/arch:AVX" FFTW_AVX_FLAGS)
  else()
    fftw_check_flag("AVX extension" "-mavx" FFTW_AVX_FLAGS)
  endif()
  if(FFTW_USE_FMA)
    set(FFTW_AVX_DEFINE "HAVE_FMA")
  endif()
endif()

if(HAVE_AVX2)
  if(MSVC)
    fftw_check_flag("AVX2 extension" "/arch:AVX2" FFTW_AVX2_FLAGS)
  else()
    fftw_check_flag("AVX2 extension" "-mavx2" FFTW_AVX2_FLAGS)
    fftw_check_flag("FMA for AVX2" "-mfma" FFTW_FMA_FLAGS)
    list(APPEND FFTW_AVX2_FLAGS ${FFTW_FMA_FLAGS})
  endif()
  set(FFTW_AVX2_DEFINE "HAVE_FMA")
endif()
